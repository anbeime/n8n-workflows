{
  "createdAt": "2025-06-09T16:14:06.552Z",
  "updatedAt": "2025-06-10T09:14:50.000Z",
  "id": "1YXw5LjjDeywGBK9",
  "name": "邮件图谱知识库",
  "active": false,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {
        "content": "## 1. How to Trigger?\n\n### a. via a password-protected private URL form where you can specify which emails you want to analyze\n\n### b. daily trigger (for regular automated updates)\n\n### c. manual trigger\n\n### d. webhook\n\nTo select a trigger, activate it while deactivating the others.\n\nTo learn more about the email search criteria, refer to this [Google page](https://support.google.com/mail/answer/7190?hl=en&co=GENIE.Platform%3DAndroid)\n\n\n\n",
        "height": 1140,
        "width": 380
      },
      "id": "fe404593-4a84-4cda-85de-943f0e62ec56",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        780,
        -720
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://infranodus.com/api/v1/graphAndAdvice?doNotSave=true&optimize=gap&includeGraph=false&includeGraphSummary=true",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBearerAuth",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "aiTopics",
              "value": "true"
            },
            {
              "name": "requestMode",
              "value": "question"
            },
            {
              "name": "name",
              "value": "={{ $('Assign Processing Settings').item.json[\"Graph Name\"] }}"
            }
          ]
        },
        "options": {}
      },
      "id": "77585aa4-08d4-4c44-b384-25114faf313e",
      "name": "InfraNodus Question Generator",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        5280,
        -280
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "jsCode": "\nlet statements = []\nfor (const item of $input.all()) {\n\n  item.json.from?.forEach((emailOrigin, index) => {\n    const textContent = item.json.text[index]?.split('\\n').join(' ');\n    const cleanTextContent = removeHtmlCssScript(textContent)\n    const cleanDate = new Date().toDateString()\n    statements.push('[[' + emailOrigin + ']] ' + '[' + cleanDate + '] ' + cleanTextContent)\n  })\n}\n\nreturn { statements: statements }\n\nfunction removeHtmlCssScript(text) {\n  if (!text || typeof text !== 'string') {\n    return '';\n  }\n  \n  let cleanText = text;\n  \n  // Remove script tags and their content (case insensitive)\n  cleanText = cleanText.replace(/<script[^>]*>[\\s\\S]*?<\\/script>/gi, '');\n  \n  // Remove style tags and their content (case insensitive)\n  cleanText = cleanText.replace(/<style[^>]*>[\\s\\S]*?<\\/style>/gi, '');\n  \n  // Remove HTML comments\n  cleanText = cleanText.replace(/<!--[\\s\\S]*?-->/g, '');\n  \n  // Remove all remaining HTML tags\n  cleanText = cleanText.replace(/<[^>]*>/g, '');\n  \n  // Decode common HTML entities\n  const htmlEntities = {\n    '&amp;': '&',\n    '&lt;': '<',\n    '&gt;': '>',\n    '&quot;': '\"',\n    '&#39;': \"'\",\n    '&nbsp;': ' ',\n    '&copy;': '©',\n    '&reg;': '®',\n    '&trade;': '™'\n  };\n  \n  Object.keys(htmlEntities).forEach(entity => {\n    const regex = new RegExp(entity, 'g');\n    cleanText = cleanText.replace(regex, htmlEntities[entity]);\n  });\n  \n  // Clean up extra whitespace\n  cleanText = cleanText.replace(/\\s+/g, ' ').trim();\n  \n  return cleanText;\n}"
      },
      "id": "45535452-402f-4d07-a4bb-8a333372f97d",
      "name": "Clean text and organize into statements",
      "type": "n8n-nodes-base.code",
      "position": [
        4020,
        -280
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "content": "# Visual Summary & Knowledge Graph Insights for Your Gmail\n\n## Use this workflow to filter your emails by search terms, date, labels, or AI-defined criteria and to visualize the main topics and gaps using the [InfraNodus knowledge graph](https://infranodus.com). Generate topical summaries and insights based on the gaps, receive them via Telegram.\n\n### Some interesting use cases:\n- Analyze all your personal messages for the week to get an overview of the main topics \n- Analyze all your Sent messages to find recurrent topics and gaps and generate ideas based. on those gaps\n- Generate ideas based on specific message filter (Personal, Promos, from a specific person, AI-defined criteria, e.g. urgency)\n- Get an overview of an interaction with a specific person / company\n- Get an overview of your notes\n- Generate ideas based on your correspondence\n- Learn about various n8n nodes useful for email processing, filtering, and data conversion\n- Never miss important topics \n\n\n### To set up (takes 2 minutes):\n- Connect your Gmail account in steps 3 and 4 (best works if you have a Google cloud Oauth key, which you can use for other Google services)\n- Get your [InfraNodus API](https://infranodus.com/api-access) key and add it in steps 7 and 8\n- Connect to your Telegram bot (takes 30 secs to set up via [@botfather](https://t.me/botfather) in step 8\n- Use a Form trigger to experiment or specify your default parameters in the Step 2 node\n",
        "height": 600,
        "width": 1280,
        "color": 6
      },
      "id": "14037e8f-ef41-4a02-9b8d-9c2180f9e9e1",
      "name": "Sticky Note1",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        780,
        -1360
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-flash-preview-04-17",
        "options": {}
      },
      "id": "a5de4cee-e297-4fc1-a029-8f69a1a48877",
      "name": "Google Gemini Chat Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "position": [
        2940,
        40
      ],
      "typeVersion": 1,
      "credentials": {
        "googlePalmApi": {
          "id": "vQQJ0ZtAmsJJh3AG",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "version": 2,
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "a8278945-a9a1-45c6-809f-b9282f6de0ed",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              },
              "leftValue": "={{ $('Assign Processing Settings').item.json[\"Label Filter\"] }}",
              "rightValue": ""
            }
          ]
        },
        "options": {}
      },
      "id": "6f010499-4774-4242-a41e-60718894bb19",
      "name": "Was label provided?",
      "type": "n8n-nodes-base.if",
      "position": [
        1740,
        -160
      ],
      "typeVersion": 2.2
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "version": 2,
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "802f2028-04bb-43ad-befa-416c0afc5515",
              "operator": {
                "type": "string",
                "operation": "empty",
                "singleValue": true
              },
              "leftValue": "={{ $('Assign Processing Settings').item.json['Analyze Full Email Text?'] }}",
              "rightValue": "Snippets"
            }
          ]
        },
        "options": {}
      },
      "id": "b45c383c-31e8-4583-af8c-3eba1d170fe5",
      "name": "Should analyze snippets?",
      "type": "n8n-nodes-base.if",
      "position": [
        2200,
        -100
      ],
      "typeVersion": 2.2
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "version": 2,
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "82abd9a8-375b-4c3f-8f19-be6b3c1b8e80",
              "operator": {
                "type": "string",
                "operation": "empty",
                "singleValue": true
              },
              "leftValue": "={{ $('Assign Processing Settings').item.json['Analyze Full Email Text?'] }}",
              "rightValue": "Snippets"
            }
          ]
        },
        "options": {}
      },
      "id": "253d9f35-c790-41ad-9f1d-88c3e449c087",
      "name": "Should analyze snippets from filtered emails?",
      "type": "n8n-nodes-base.if",
      "position": [
        2220,
        -420
      ],
      "typeVersion": 2.2
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "version": 2,
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "731d1986-b8e1-480f-b956-0e9e7d2b9df8",
              "operator": {
                "type": "array",
                "operation": "contains",
                "rightType": "any"
              },
              "leftValue": "={{ $json.labels.map(label => label.name) }}",
              "rightValue": "={{ $('Assign Processing Settings').item.json['Label Filter'] }}"
            }
          ]
        },
        "options": {}
      },
      "id": "4a42ca7d-aebb-4b53-abef-93657e6f7e2b",
      "name": "Filter emails by label",
      "type": "n8n-nodes-base.filter",
      "position": [
        1940,
        -320
      ],
      "notesInFlow": true,
      "typeVersion": 2.2,
      "notes": "To only show personal mails, use CATEGORY_PERSONAL in the filters (or any other label you like)\nCATEGORY_PROMOTIONS - for promos\nSENT - for your sent messages"
    },
    {
      "parameters": {
        "operation": "get",
        "messageId": "={{ $json.id }}",
        "simple": false,
        "options": {}
      },
      "id": "077c5d0e-1787-4394-a54e-28825ed9bf8d",
      "name": "Get Full Message Content",
      "type": "n8n-nodes-base.gmail",
      "position": [
        2540,
        -100
      ],
      "webhookId": "e79f9021-02a7-4506-8aa8-b21a6b823815",
      "typeVersion": 2.1,
      "credentials": {
        "gmailOAuth2": {
          "id": "BmcAAKceln6nG6on",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "version": 2,
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "6ccf71c6-0f1b-4560-82c7-0185946af0a2",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              },
              "leftValue": "={{ $('Assign Processing Settings').item.json['Email Type Description'] }}",
              "rightValue": ""
            }
          ]
        },
        "options": {}
      },
      "id": "fe281e0f-94a3-41c5-9a4f-f79efae02e5a",
      "name": "Should use AI to filter emails further?",
      "type": "n8n-nodes-base.if",
      "position": [
        2800,
        -260
      ],
      "typeVersion": 2.2
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "version": 2,
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "loose"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "eaffd686-c04b-4327-b2c5-3b0da2eee00e",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              },
              "leftValue": "={{ $json.text || $json.snippet }}",
              "rightValue": ""
            }
          ]
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "id": "56647574-038c-4486-8f89-7bc5896d9e4e",
      "name": "Message text or snippet present?",
      "type": "n8n-nodes-base.filter",
      "position": [
        2980,
        -360
      ],
      "typeVersion": 2.2
    },
    {
      "parameters": {
        "inputText": "={{ $json.text || $json.snippet }}",
        "categories": {
          "categories": [
            {
              "category": "Matched User's Condition",
              "description": "={{ $('Assign Processing Settings').item.json['Email Type Description'] }}"
            },
            {
              "category": "Spam and Notifications",
              "description": "Spam, automatic notifications, generic, non-personalized emails, non-personalized commercial offers, promotions, discounts"
            }
          ]
        },
        "options": {}
      },
      "id": "205497d7-e48e-4169-a604-87b4afd52d6e",
      "name": "Classify Emails",
      "type": "@n8n/n8n-nodes-langchain.textClassifier",
      "position": [
        3120,
        -200
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "version": 2,
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "9448b606-0961-4852-8917-408e5fef7df9",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              },
              "leftValue": "={{ $json.text }}",
              "rightValue": ""
            }
          ]
        },
        "options": {}
      },
      "id": "1720f780-b032-4e06-9fd8-192d1b3681dd",
      "name": "Text field present?",
      "type": "n8n-nodes-base.if",
      "position": [
        3580,
        -280
      ],
      "typeVersion": 2.2
    },
    {
      "parameters": {
        "fieldsToAggregate": {
          "fieldToAggregate": [
            {
              "fieldToAggregate": "from.text",
              "renameField": true,
              "outputFieldName": "from"
            },
            {
              "fieldToAggregate": "text",
              "renameField": true,
              "outputFieldName": "text"
            },
            {
              "fieldToAggregate": "date",
              "renameField": true,
              "outputFieldName": "date"
            }
          ]
        },
        "options": {}
      },
      "id": "282bfe00-e0e8-4975-8e32-1a8fed965477",
      "name": "Aggregate from full email texts",
      "type": "n8n-nodes-base.aggregate",
      "position": [
        3800,
        -400
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "fieldsToAggregate": {
          "fieldToAggregate": [
            {
              "fieldToAggregate": "From",
              "renameField": true,
              "outputFieldName": "from"
            },
            {
              "fieldToAggregate": "snippet",
              "renameField": true,
              "outputFieldName": "text"
            },
            {
              "fieldToAggregate": "internalDate",
              "renameField": true,
              "outputFieldName": "date"
            }
          ]
        },
        "options": {}
      },
      "id": "c41b3085-2a8f-4c3f-bd0c-06ff4e810c30",
      "name": "Aggregate from email snippets",
      "type": "n8n-nodes-base.aggregate",
      "position": [
        3800,
        -120
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "amount": 60
      },
      "id": "74614f4c-a691-4d10-b14d-de458fb65a9a",
      "name": "Wait before generating questions",
      "type": "n8n-nodes-base.wait",
      "position": [
        4800,
        -320
      ],
      "webhookId": "c6d4fa4d-223a-47c3-b026-a002daa05b3b",
      "typeVersion": 1.1
    },
    {
      "parameters": {
        "chatId": "use_get_id_bot_to_get_it",
        "text": "=🧬 The knowledge graph is ready at [https://infranodus.com/your_user_name/{{ $('Assign Processing Settings').item.json[\"Graph Name\"] }}/edit](https://infranodus.com/your_user_name/{{ $('Assign Processing Settings').item.json[\"Graph Name\"] }}/edit)\n\nTopical Summary: \n{{ $('InfraNodus AI Summary & Graph Link').item.json.aiAdvice[0].text }}",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "id": "1a6f6c02-f5eb-40b2-8a8d-97926abad440",
      "name": "Send the graph link and summary via Telegram",
      "type": "n8n-nodes-base.telegram",
      "maxTries": 2,
      "position": [
        5620,
        -60
      ],
      "webhookId": "51b1be86-6889-420c-b0c6-e95f9b464b97",
      "retryOnFail": true,
      "typeVersion": 1.2,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "chatId": "use_get_id_bot_to_get_it",
        "text": "=💎 Insight Question: \n{{ $json.aiAdvice[0].text }}\n \nMore at [https://infranodus.com/your_user_name/{{ $('Assign Processing Settings').item.json[\"Graph Name\"] }}/edit](https://infranodus.com/your_user_name/{{ $('Assign Processing Settings').item.json[\"Graph Name\"] }}/edit)",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "id": "8480c26d-8da4-4ed8-bb19-3cec012fb547",
      "name": "Send an insight question via Telegram",
      "type": "n8n-nodes-base.telegram",
      "maxTries": 2,
      "position": [
        5620,
        220
      ],
      "webhookId": "690e527e-3085-4b32-b1d1-ea2f70aa403f",
      "retryOnFail": true,
      "typeVersion": 1.2,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "operation": "getAll",
        "returnAll": true,
        "filters": {
          "q": "={{ $json[\"Search Criteria\"] }}"
        }
      },
      "id": "2fb50b8d-ec32-4ac9-859e-6d08634b301d",
      "name": "Get Messages by Search Criteria",
      "type": "n8n-nodes-base.gmail",
      "position": [
        1540,
        -160
      ],
      "webhookId": "083fdee4-dcae-4366-8550-8df8dbe29fa2",
      "typeVersion": 2.1,
      "credentials": {
        "gmailOAuth2": {
          "id": "BmcAAKceln6nG6on",
          "name": "Gmail account"
        }
      },
      "notes": "// use this is a filter to retrieve yesterday's date\n// change the number 1 below to the number of days to go behind\n{{ \n  (() => {\n    const yesterday = new Date();\n    yesterday.setDate(yesterday.getDate() - 1);\n    return `after:${yesterday.getFullYear()}/${(yesterday.getMonth() + 1).toString().padStart(2, '0')}/${yesterday.getDate().toString().padStart(2, '0')}`;\n  })()\n}}"
    },
    {
      "parameters": {
        "authentication": "basicAuth",
        "formTitle": "Generate a Visual Summary of Your Mailbox",
        "formDescription": "Build a knowledge graph from your Gmail mails based on search criteria, label, date, and email type. Generate topical summary and insight questions.",
        "formFields": {
          "values": [
            {
              "fieldLabel": "Search Criteria",
              "placeholder": "e.g. from:email@gmail.com after:2025/06/01 label:personal"
            },
            {
              "fieldLabel": "Label Filter",
              "placeholder": "SENT, CATEGORY_PERSONAL - for additional filtering"
            },
            {
              "fieldLabel": "Email Type Description",
              "placeholder": "Anything that relates to my work on various projects"
            },
            {
              "fieldLabel": "Analyze Full Email Text?",
              "fieldType": "dropdown",
              "fieldOptions": {
                "values": [
                  {
                    "option": "Yes"
                  }
                ]
              }
            },
            {
              "fieldLabel": "Build a Social Graph?",
              "fieldType": "dropdown",
              "fieldOptions": {
                "values": [
                  {
                    "option": "Yes"
                  }
                ]
              }
            },
            {
              "fieldLabel": "Graph Name",
              "placeholder": "e.g. n8n_gmail_search"
            }
          ]
        },
        "options": {
          "appendAttribution": false,
          "respondWithOptions": {
            "values": {
              "formSubmittedText": "Thank you, you will receive a summary via Telegram in a moment, once the analysis is ready."
            }
          }
        }
      },
      "id": "39b3c43a-8cad-4105-acd9-5d8d25f535bf",
      "name": "User submits form",
      "type": "n8n-nodes-base.formTrigger",
      "position": [
        880,
        -180
      ],
      "webhookId": "84c4d21b-e825-42f0-a73b-c9a837ec8da3",
      "typeVersion": 2.2,
      "disabled": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://infranodus.com/api/v1/graphAndAdvice?doNotSave=true&optimize=summary&includeGraph=false&includeGraphSummary=true",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBearerAuth",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "aiTopics",
              "value": "true"
            },
            {
              "name": "requestMode",
              "value": "graph summary"
            },
            {
              "name": "name",
              "value": "={{ $('Assign Processing Settings').item.json[\"Graph Name\"] }}"
            }
          ]
        },
        "options": {}
      },
      "id": "69bc4068-4fa9-4d4d-9a4f-139428e086f6",
      "name": "InfraNodus AI Summary & Graph Link",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        5060,
        -280
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "combinator": "and",
                "conditions": [
                  {
                    "id": "76bf82df-009a-4714-819c-ec9159f39f72",
                    "operator": {
                      "type": "string",
                      "operation": "notEmpty",
                      "singleValue": true
                    },
                    "leftValue": "={{ $('Assign Processing Settings').item.json['Build a Social Graph?'] }}",
                    "rightValue": ""
                  }
                ]
              },
              "renameOutput": true,
              "outputKey": "social knowledge graph"
            },
            {
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "combinator": "and",
                "conditions": [
                  {
                    "id": "49ca2845-be5b-40ad-b6b4-c2a4e45f4f77",
                    "operator": {
                      "type": "string",
                      "operation": "empty",
                      "singleValue": true
                    },
                    "leftValue": "={{ $('Assign Processing Settings').item.json['Build a Social Graph?'] }}",
                    "rightValue": ""
                  }
                ]
              },
              "renameOutput": true,
              "outputKey": "text knowledge graph"
            }
          ]
        },
        "options": {}
      },
      "id": "a8ec292c-1246-4bed-9b94-e2b59cb065b9",
      "name": "Type of graph to build",
      "type": "n8n-nodes-base.switch",
      "position": [
        4280,
        -220
      ],
      "typeVersion": 3.2
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://infranodus.com/api/v1/graphAndStatements?doNotSave=false&includeGraph=false&includeGraphSummary=true&includeStatements=false",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBearerAuth",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "name",
              "value": "={{ $('Assign Processing Settings').item.json[\"Graph Name\"] }}"
            },
            {
              "name": "statements",
              "value": "={{ $json.statements }}"
            },
            {
              "name": "contextSettings",
              "value": "={{{ \"partOfSpeechToProcess\":\"HASHTAGS_AND_WORDS\", \"doubleSquarebracketsProcessing\":\"PROCESS_AS_MENTIONS\"} }}"
            }
          ]
        },
        "options": {}
      },
      "id": "4ab1b39b-8a61-43d4-8ae8-e42ccb1e011a",
      "name": "InfraNodus Build a Social Knowledge Graph",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        4540,
        -320
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://infranodus.com/api/v1/graphAndStatements?doNotSave=false&includeGraph=false&includeGraphSummary=true&includeStatements=false",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBearerAuth",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "name",
              "value": "={{ $('Assign Processing Settings').item.json[\"Graph Name\"] }}"
            },
            {
              "name": "statements",
              "value": "={{ $json.statements }}"
            },
            {
              "name": "contextSettings",
              "value": "={{{ \"partOfSpeechToProcess\":\"HASHTAGS_AND_WORDS\", \"doubleSquarebracketsProcessing\":\"EXCLUDE\", \"mentionsProcessing\":\"EXCLUDE\"} }}"
            }
          ]
        },
        "options": {}
      },
      "id": "d87131cf-1a19-4674-996b-6487901cbb51",
      "name": "InfraNodus Build a Text Knowledge Graph",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        4540,
        -20
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {},
      "id": "a52016ef-a5fb-45fe-92f2-979748e974e8",
      "name": "When clicking ‘Test workflow’",
      "type": "n8n-nodes-base.manualTrigger",
      "position": [
        880,
        260
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={\n  \"Label Filter\": \"{{ $json[\"Label Filter\"] !== undefined ? $json[\"Label Filter\"] : `CATEGORY_PERSONAL`}}\",\n  \"Email Type Description\": \"{{ $json[\"Email Type Description\"] !== undefined ? $json[\"Email Type Description\"] : `Important personalized emails, exclude mailouts and non-urgent notifications` }}\",\n  \"Analyze Full Email Text?\": \"{{ $json[\"Analyze Full Email Text?\"] !== undefined ? $json[\"Analyze Full Email Text?\"] : ``}}\",\n  \"Build a Social Graph?\": \"{{ $json[\"Build a Social Graph?\"] !== undefined ? $json[\"Build a Social Graph?\"] : `Yes`}}\",\n  \"Search Criteria\": \"{{ $json[\"Search Criteria\"] !== undefined ? $json[\"Search Criteria\"] :\n  (() => {\n    const yesterday = new Date();\n    yesterday.setDate(yesterday.getDate() - 1);\n    return `after:${yesterday.getFullYear()}/${(yesterday.getMonth() + 1).toString().padStart(2, '0')}/${yesterday.getDate().toString().padStart(2, '0')}`;\n  })()\n}}\",\n  \"Graph Name\": \"{{ $json[\"Graph Name\"] !== undefined ? $json[\"Graph Name\"] : `n8n_gmail_search_` + $now.toString().split('T')[0] }}\"\n}",
        "options": {}
      },
      "id": "e5a44d67-7bad-4b95-80f1-2336fed9cd78",
      "name": "Assign Processing Settings",
      "type": "n8n-nodes-base.set",
      "position": [
        1260,
        80
      ],
      "typeVersion": 3.4,
      "notes": "// script to generate a date \n// minus -1 is the days before\n\n(() => {\n    const yesterday = new Date();\n    yesterday.setDate(yesterday.getDate() - 7);\n    return `after:${yesterday.getFullYear()}/${(yesterday.getMonth() + 1).toString().padStart(2, '0')}/${yesterday.getDate().toString().padStart(2, '0')}`;\n  })()"
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "triggerAtHour": 10
            }
          ]
        }
      },
      "id": "1ad44050-703c-4a47-b7af-0fbb0f00ed72",
      "name": "Schedule Trigger",
      "type": "n8n-nodes-base.scheduleTrigger",
      "position": [
        880,
        40
      ],
      "typeVersion": 1.2,
      "disabled": true
    },
    {
      "parameters": {
        "content": "## 2. Filter Settings\n\n### 🚨 Specify which emails should be extracted. Default values are provided in the node. \n\nTo increase the speed, we recommend to use the Gmail search operators like \"after:2025/06/01\" or \"keyword\" or \"label:notes\".\n\nDefault values are provided in the node, which are filled in automatically if no details are specified. \n\n[Options](https://support.google.com/mail/answer/7190?hl=en&co=GENIE.Platform%3DAndroid) you can use for filtering:\n\n- search string or date (e.g. \"after:2025/06/01\" or \"business\")\n\n- email labels and categories (e.g. SENT, CATEGORY_PERSONAL, etc)\n\n- use AI query for advanced filtering\n\n- build a social text graph (with sender's emails)\n\n\n",
        "height": 960,
        "width": 220
      },
      "id": "80c02771-9a81-4771-8367-ac341df88076",
      "name": "Sticky Note2",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1200,
        -720
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## 3. Get Gmail Messages\n\n### Get the emails that satisfy the filter criteria. \n#### 🚨 Specify your Gmail account credentials here\n\nWe recommend using the filters to make the search faster. You can then use the labels to filter the search results. However, you can also use the labels in the search query, like \"label:notes\" to increase the speed in this step. Alternatively, you can set a limit to 50 to 100 and then this node will retrieve the most recent messages. \n\nSome useful labels:\n- SENT (or label:sent in the search query)\n- CATEGORY_PERSONAL (or label:personal in the search query)\n- CATEGORY_PROMOTION (or label:promotion in the search query)\n- ... and your own labels (e.g. \"Business\", \"Urgent\", etc.)\n\nSee our [other workflows](https://n8n.io/creators/infranodus/) to automate email labeling",
        "height": 960,
        "width": 600
      },
      "id": "34f6bec0-ea8c-484b-aa34-a97cf87b97b4",
      "name": "Sticky Note3",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1460,
        -720
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## 4. Analyze Snippets or Full Text?\n\n### Which parts of emails to analyze?\n\nBy default, we're analyzing the snippets provided by Google. However, for detailed and more precise analysis you can also analyze the full text of emails. \n\nIn this case, we need to retrieve the email text using a separate Gmail node.\n",
        "height": 960,
        "width": 540
      },
      "id": "c2cebc4c-8284-4031-b766-43d243ea97a2",
      "name": "Sticky Note4",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2160,
        -720
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## 5. Use AI Classifier to Filter Mails?\n\n### You can use the AI to add additional filters. Check the Classify Node for specifics.\n\nIf the Google search parameters or your existing emails are not sufficient, you can use the AI to classify the type of emails you want to analyze. \n\nYou can describe it in the User Submits Form in the Step 1 or in the Assign Processing Settings in the Step 2. \n\nWe prefer to use the Google's Gemini model as it's faster, and we also have to be less concerned about sending the email content to an external model as it's the same company. \n\n🚨  Specify your Gemini API key here (takes 30 seconds to get in the Google's AI studio)",
        "height": 960,
        "width": 660
      },
      "id": "946a3152-ec74-4cb6-827a-6e96898614c1",
      "name": "Sticky Note5",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2760,
        -720
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## 6. Formatting Text or Snippets\n\n### We convert the html to text and also format the data to be converted to the [InfraNodus](https://infranodus.com) format, so we can build a nice graph from it.\n\n",
        "height": 960,
        "width": 660
      },
      "id": "25186058-787f-4803-b882-b870dba3a733",
      "name": "Sticky Note6",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        3500,
        -720
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## 7. Building a Knowledge Graph\n\n### We submit the data to build a knowledge graph using [InfraNodus](https://infranodus.com). \n\n### 🚨  Specify the graph name you want to save the data to  in the `name` field of the HTTP InfraNodus node (or in the Step 2) and your [InfraNodus API key](https://infranodus.com/api-access) credentials.\n\nWe have two types of graphs:\n\n- Text Knowledge Graph will visualize the content and the main topics and gaps within\n\n- Social Knowledge Graph will visualize the content as well as the senders so you can see not only the main topics and gaps, but also who actually sent the messages.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n![Standard text graph](https://support.noduslabs.com/hc/article_attachments/20394930508444)",
        "height": 1340,
        "width": 540
      },
      "id": "a0d8481c-f6ff-4ff3-8368-83c753aaf52c",
      "name": "Sticky Note7",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        4200,
        -720
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## 8. Use InfraNodus to generate topical summary and insight questions \n\n### We use the [InfraNodus GraphRAG API](https://infranodus.com/use-case/ai-knowledge-graphs) to generate the topical summary and AI questions\n\n\n### The insight is based on the structural gap identified in the graph — the topics that could be connected but are not yet.\n\n\n### 🚨  Specify the graph name you want to save the data to  in the `name` field of the HTTP InfraNodus node or in the Step 2.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n![structural gap](https://infranodus.com/images/front/infranodus-structural-gaps-ideas@2x.jpg)\n\n",
        "height": 1340,
        "width": 480
      },
      "id": "46d5289e-d618-4a9f-99ad-1383218e087d",
      "name": "Sticky Note8",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        4960,
        -720
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## 9. Send the insight and the graph link via Telegram and Email\n\n### Get informed via Telegram when the graph is created along with the topical summary and insight question\n\n### 🚨  Creating a bot in Telegram takes 30 seconds: just to to [@botfather](https://t.me/botfather) and type in `newbot` — then use the API key it generates in the credentials\n\n\n",
        "height": 1340,
        "width": 300
      },
      "id": "67e3649f-c7df-434d-992c-aed1e21045e6",
      "name": "Sticky Note9",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        5540,
        -720
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## Types of knowledge graphs\n\n### Knowledge graphs can show you recurrent patterns and gaps in your data. This can be very useful for understanding complex relations and discovering what you would otherwise have missed.\n\n#### You can build two types of graphs with this template: a text graph that shows the topics only and the social graph that adds the email senders to the graph, so you can see the associations of individuals / companies with the topics you're talking about.\n\n\n| Text Graph |  | Social Graph |\n|------------|--|-------------|\n| ![Left Image](https://support.noduslabs.com/hc/article_attachments/20394930508444)  |  |   ![Right Image](https://support.noduslabs.com/hc/article_attachments/20402112649628) |",
        "height": 600,
        "width": 1260,
        "color": 7
      },
      "id": "901c9f90-2aaf-47d4-a2e7-e62c1f95e617",
      "name": "Sticky Note10",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2160,
        -1360
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "sendTo": "your_own_email_2912319@email.com",
        "subject": "=Email Summary as of {{$now.toString().split('T')[0]}}",
        "emailType": "text",
        "message": "=Hello\n\nHere is a visual knowledge graph summary of your emails as of {{$now.toString().split('T')[0]}}: \nhttps://infranodus.com/your_user_name/{{ $('Assign Processing Settings').item.json[\"Graph Name\"] }}/edit\n\nTopical summary:\n{{ $('InfraNodus AI Summary & Graph Link').item.json.aiAdvice[0].text }}\n\nResearch questions:\n{{ $json.aiAdvice[0].text }}\n\n",
        "options": {}
      },
      "id": "d7e4da20-9cb0-4872-9911-8f1c5a20da3d",
      "name": "Gmail",
      "type": "n8n-nodes-base.gmail",
      "position": [
        5620,
        -280
      ],
      "webhookId": "9ecdabd6-c4bc-4bff-81c9-14ba07a2b947",
      "typeVersion": 2.1,
      "credentials": {
        "gmailOAuth2": {
          "id": "BmcAAKceln6nG6on",
          "name": "Gmail account"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "resource": "Files",
        "operation": "Create File",
        "requestOptions": {}
      },
      "type": "n8n-nodes-obsidian-local-rest-api.obsidianVaultRestApi",
      "typeVersion": 1,
      "position": [
        4220,
        -920
      ],
      "id": "1cf2f701-168b-42ff-9a6d-854bb14541e3",
      "name": "Obsidian Vault"
    }
  ],
  "connections": {
    "Classify Emails": {
      "main": [
        [
          {
            "node": "Text field present?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Assign Processing Settings",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "User submits form": {
      "main": [
        [
          {
            "node": "Assign Processing Settings",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Text field present?": {
      "main": [
        [
          {
            "node": "Aggregate from full email texts",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Aggregate from email snippets",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Was label provided?": {
      "main": [
        [
          {
            "node": "Filter emails by label",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Should analyze snippets?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter emails by label": {
      "main": [
        [
          {
            "node": "Should analyze snippets from filtered emails?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Type of graph to build": {
      "main": [
        [
          {
            "node": "InfraNodus Build a Social Knowledge Graph",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "InfraNodus Build a Text Knowledge Graph",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Full Message Content": {
      "main": [
        [
          {
            "node": "Should use AI to filter emails further?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Classify Emails",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Should analyze snippets?": {
      "main": [
        [
          {
            "node": "Should use AI to filter emails further?",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Get Full Message Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Assign Processing Settings": {
      "main": [
        [
          {
            "node": "Get Messages by Search Criteria",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate from email snippets": {
      "main": [
        [
          {
            "node": "Clean text and organize into statements",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "InfraNodus Question Generator": {
      "main": [
        [
          {
            "node": "Send an insight question via Telegram",
            "type": "main",
            "index": 0
          },
          {
            "node": "Send the graph link and summary via Telegram",
            "type": "main",
            "index": 0
          },
          {
            "node": "Gmail",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate from full email texts": {
      "main": [
        [
          {
            "node": "Clean text and organize into statements",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Messages by Search Criteria": {
      "main": [
        [
          {
            "node": "Was label provided?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Message text or snippet present?": {
      "main": [
        [
          {
            "node": "Classify Emails",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait before generating questions": {
      "main": [
        [
          {
            "node": "InfraNodus AI Summary & Graph Link",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When clicking ‘Test workflow’": {
      "main": [
        [
          {
            "node": "Assign Processing Settings",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "InfraNodus AI Summary & Graph Link": {
      "main": [
        [
          {
            "node": "InfraNodus Question Generator",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Clean text and organize into statements": {
      "main": [
        [
          {
            "node": "Type of graph to build",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "InfraNodus Build a Text Knowledge Graph": {
      "main": [
        [
          {
            "node": "Wait before generating questions",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Should use AI to filter emails further?": {
      "main": [
        [
          {
            "node": "Message text or snippet present?",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Text field present?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "InfraNodus Build a Social Knowledge Graph": {
      "main": [
        [
          {
            "node": "Wait before generating questions",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Should analyze snippets from filtered emails?": {
      "main": [
        [
          {
            "node": "Should use AI to filter emails further?",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Get Full Message Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "pinData": {},
  "versionId": "67fc1e53-e772-4648-8d9b-b3a30463b543",
  "triggerCount": 0,
  "tags": [
    {
      "createdAt": "2025-06-09T07:13:31.398Z",
      "updatedAt": "2025-06-09T07:13:31.398Z",
      "id": "XvpGF2N68EJ6BLus",
      "name": "AI"
    }
  ]
}