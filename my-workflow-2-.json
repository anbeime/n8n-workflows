{
  "createdAt": "2025-06-17T08:43:24.732Z",
  "updatedAt": "2025-06-17T08:43:24.732Z",
  "id": "UFwaSZgmN1mDlYiR",
  "name": "My workflow 2",
  "active": false,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {
        "options": {}
      },
      "id": "77b1af14-8707-4a15-8c41-8674e6dfc896",
      "name": "When chat message received",
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "position": [
        -1740,
        -260
      ],
      "webhookId": "713a7f98-0e3d-4eb7-aafa-599ca627c8b4",
      "typeVersion": 1.1
    },
    {
      "parameters": {
        "code": {
          "supplyData": {
            "code": "let llms = await this.getInputConnectionData('ai_languageModel', 0);\nllms.reverse(); // reverse array, so the order matches the UI elements\n\nconst llm_index = $input.item.json.llm_index;\nif (!Number.isInteger(llm_index)) {\n  console.log(\"'llm_index' is udefined or not a valid integer\");\n  throw new Error(\"'llm_index' is udefined or not a valid integer\");\n}\n\nif(typeof llms[llm_index] === 'undefined') {\n  console.log(`No LLM found with index ${llm_index}`);\n  throw new Error(`No LLM found with index ${llm_index}`);\n}\n\nreturn llms[llm_index];"
          }
        },
        "inputs": {
          "input": [
            {
              "type": "ai_languageModel",
              "required": true
            }
          ]
        },
        "outputs": {
          "output": [
            {
              "type": "ai_languageModel"
            }
          ]
        }
      },
      "id": "53096179-8b96-46b3-ae0a-9b43501f32bc",
      "name": "Switch Model",
      "type": "@n8n/n8n-nodes-langchain.code",
      "position": [
        -1420,
        -20
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "24b4d30e-484a-4cc1-a691-0653ed764296",
              "name": "llm_index",
              "type": "number",
              "value": "={{ $json.llm_index || 0 }}"
            }
          ]
        },
        "options": {}
      },
      "id": "426028bd-0472-40f1-aa87-e7c5e1e55b8f",
      "name": "Set LLM index",
      "type": "n8n-nodes-base.set",
      "position": [
        -1520,
        -260
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "24b4d30e-484a-4cc1-a691-0653ed764296",
              "name": "llm_index",
              "type": "number",
              "value": "={{ $('Set LLM index').item.json.llm_index + 1 }}"
            }
          ]
        },
        "options": {}
      },
      "id": "a319582d-c4b7-4ef6-ad84-72c243bd2c58",
      "name": "Increase LLM index",
      "type": "n8n-nodes-base.set",
      "position": [
        -540,
        -540
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {},
      "id": "bb11d98f-88be-483c-8126-eebbb3f92ded",
      "name": "No Operation, do nothing",
      "type": "n8n-nodes-base.noOp",
      "position": [
        -320,
        220
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "version": 2,
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "3253e1f2-172e-4af4-a492-3b9c6e9e4797",
              "operator": {
                "name": "filter.operator.equals",
                "type": "string",
                "operation": "equals"
              },
              "leftValue": "={{ $json.error }}",
              "rightValue": "Error in sub-node Switch Model"
            }
          ]
        },
        "options": {}
      },
      "id": "a6d51cdf-1f1e-4214-bdca-f612ebadf81c",
      "name": "Check for expected error",
      "type": "n8n-nodes-base.if",
      "position": [
        -920,
        -180
      ],
      "typeVersion": 2.2
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "b352627d-d692-47f8-8f8c-885b68073843",
              "name": "output",
              "type": "string",
              "value": "The loop finished without a satisfying result"
            }
          ]
        },
        "options": {}
      },
      "id": "05d15dea-c49c-43f2-9284-8344cb628c33",
      "name": "Loop finished without results",
      "type": "n8n-nodes-base.set",
      "position": [
        -700,
        -280
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "b352627d-d692-47f8-8f8c-885b68073843",
              "name": "output",
              "type": "string",
              "value": "An unexpected error happened"
            }
          ]
        },
        "options": {}
      },
      "id": "cc461833-b92d-4350-a28b-1f808681a57c",
      "name": "Unexpected error",
      "type": "n8n-nodes-base.set",
      "position": [
        -700,
        -80
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "b352627d-d692-47f8-8f8c-885b68073843",
              "name": "output",
              "type": "string",
              "value": "={{ $json.text || $json.output }}"
            }
          ]
        },
        "options": {}
      },
      "id": "f1421e5c-dd98-4e55-b506-be9ad99d7e68",
      "name": "Return result",
      "type": "n8n-nodes-base.set",
      "position": [
        -540,
        -800
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "inputText": "={{ $json.text }}",
        "options": {
          "categories": "pass, fail",
          "systemPromptTemplate": "You are a highly intelligent and accurate sentiment analyzer. Analyze the sentiment of the provided text. Categorize it into one of the following: {categories}. Use the provided formatting instructions. Only output the JSON.\n\n> Evaluate the following customer support response. Give a short JSON answer with a field “quality”: “pass” or “fail”. Only return “pass” if the response:\n\n1. Acknowledges both the broken keyboard and the late delivery  \n2. Uses a polite and empathetic tone  \n3. Offers a clear resolution or next step (like refund, replacement, or contact support)"
        }
      },
      "id": "77759f20-3fe4-4269-accf-9972242dc37e",
      "name": "Validate response",
      "type": "@n8n/n8n-nodes-langchain.sentimentAnalysis",
      "position": [
        -920,
        -640
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('When chat message received').item.json.chatInput }}",
        "messages": {
          "messageValues": [
            {
              "message": "=You’re an AI assistant replying to a customer who is upset about a faulty product and late delivery. The customer uses sarcasm and is vague. Write a short, polite response, offering help."
            }
          ]
        }
      },
      "id": "063b3238-98c5-4976-9afb-a7611e4cb54b",
      "name": "Generate response",
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "position": [
        -1300,
        -260
      ],
      "retryOnFail": false,
      "typeVersion": 1.6,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "content": "### Customer complaint - example\n\nI really *love* waiting two weeks just to get a keyboard that doesn’t even work. Great job. Any chance I could actually use the thing I paid for sometime this month?",
        "height": 140,
        "width": 480
      },
      "id": "10fddf9e-c294-4f83-84a8-c7277b2cb40f",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1580,
        -500
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "Defines the LLM node by index which should be used.",
        "height": 240,
        "width": 220,
        "color": 7
      },
      "id": "ca72f6db-613d-4824-8bd0-7d6ca1ef364f",
      "name": "Sticky Note1",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1580,
        -340
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "Dynamically connects the LLM by the index provided in the previous node.",
        "height": 200,
        "width": 380,
        "color": 7
      },
      "id": "5cf6b69a-696f-41dd-b2a7-412b19ccc9ae",
      "name": "Sticky Note2",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1480,
        -100
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "Check if LangChain Code Node ran into error. _Currently only supports error output from main Node_",
        "height": 260,
        "width": 220,
        "color": 7
      },
      "id": "c2151201-f468-442b-aca0-8bc30e6eb273",
      "name": "Sticky Note3",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -980,
        -280
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "Generates a polite answer based on the customers complaint.",
        "height": 240,
        "width": 380,
        "color": 7
      },
      "id": "58ca0743-a90a-498a-ae11-07f0383e48cb",
      "name": "Sticky Note4",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1360,
        -340
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "Analyses the generated answer by certain criteria",
        "height": 220,
        "width": 380,
        "color": 7
      },
      "id": "3ce28c88-a0fb-47c1-b441-6aeede2e49a2",
      "name": "Sticky Note5",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -980,
        -700
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "Increases the index to choose the next available LLM on the next run",
        "height": 240,
        "width": 220,
        "color": 7
      },
      "id": "d1fd143f-8788-4402-9712-9503ebc08afe",
      "name": "Sticky Note6",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -600,
        -620
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "model": "deepseek/deepseek-r1-0528:free",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        -1460,
        220
      ],
      "id": "5c39953e-68dc-452e-9450-00926d9cd383",
      "name": "OpenRouter Chat Model",
      "credentials": {
        "openRouterApi": {
          "id": "r7KVJUV9mVgdFFSu",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "model": "deepseek/deepseek-r1-0528:free",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        -1340,
        200
      ],
      "id": "9a091b5c-6d7f-4ac3-a709-ecc5c7120b92",
      "name": "OpenRouter Chat Model1",
      "credentials": {
        "openRouterApi": {
          "id": "r7KVJUV9mVgdFFSu",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "model": "deepseek/deepseek-r1-0528:free",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        -1220,
        220
      ],
      "id": "7ea19bde-c328-44ef-9931-935a0f854498",
      "name": "OpenRouter Chat Model2",
      "credentials": {
        "openRouterApi": {
          "id": "r7KVJUV9mVgdFFSu",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "model": "deepseek/deepseek-r1-0528:free",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        -860,
        -420
      ],
      "id": "410f609a-8ed1-4bbe-b1f9-0a0d4d77507e",
      "name": "OpenRouter Chat Model3",
      "credentials": {
        "openRouterApi": {
          "id": "r7KVJUV9mVgdFFSu",
          "name": "OpenRouter account"
        }
      }
    }
  ],
  "connections": {
    "Switch Model": {
      "ai_languageModel": [
        [
          {
            "node": "Generate response",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Set LLM index": {
      "main": [
        [
          {
            "node": "Generate response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate response": {
      "main": [
        [
          {
            "node": "Validate response",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Check for expected error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate response": {
      "main": [
        [
          {
            "node": "Return result",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Increase LLM index",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Increase LLM index": {
      "main": [
        [
          {
            "node": "No Operation, do nothing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check for expected error": {
      "main": [
        [
          {
            "node": "Loop finished without results",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Unexpected error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "No Operation, do nothing": {
      "main": [
        [
          {
            "node": "Set LLM index",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When chat message received": {
      "main": [
        [
          {
            "node": "Set LLM index",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Switch Model",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "Switch Model",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "Switch Model",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model3": {
      "ai_languageModel": [
        [
          {
            "node": "Validate response",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "pinData": {},
  "versionId": "69adb0c6-345f-4c58-9fec-1e2405429f26",
  "triggerCount": 0,
  "tags": []
}